{"version":3,"sources":["components/ThemeEditor/ThemeEditor.tsx","components/App/App.tsx","index.tsx","components/ThemeEditor/ThemeEditor.module.scss","components/App/App.module.scss"],"names":["ColorMode","ThemeEditor","props","name","React","defaultTheme","editorTheme","setEditorTheme","autoUpdate","setAutoUpdate","toggleOutput","setToggleOutput","defaultThemeColors","Object","entries","color","handlePropertyUpdate","value","console","log","setTheme","initializeThemeSelector","className","Styles","onClick","readOnly","JSON","stringify","undefined","map","key","onChange","ColorView","mode","setMode","event","currentTarget","type","hex","text","App","autoConnect","theme","updateBody","onClose","window","close","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"0HA2DKA,E,4EAtDQC,EAA+B,SAACC,GAC1BA,EAARC,KAD6C,IAAD,EAEbC,WAAsBC,gBAFT,mBAE5CC,EAF4C,KAE/BC,EAF+B,OAGfH,YAAwB,GAHT,mBAG5CI,EAH4C,KAGhCC,EAHgC,OAIXL,YAAwB,GAJb,mBAI5CM,EAJ4C,KAI9BC,EAJ8B,KAK7CC,EAAqBC,OAAOC,QAAQR,EAAYS,OAEhDC,EAAuB,SAACD,GAC1BR,EAAe,eAAID,EAAL,CAAkBS,MAAM,eAAKT,EAAYS,MAAlB,eAA0BA,EAAMZ,KAAOY,EAAME,WAClFC,QAAQC,IAAIJ,EAAOT,IAmBvB,OAVAF,aAAgB,WACRI,GACAY,mBAASd,KAEd,CAACE,EAAYF,IAEhBF,aAAgB,WACZiB,kCAAwB,OAIxB,uBAAKC,UAAWC,IAAM,QAClB,gBAAC,SAAD,CAAQC,QAAS,kBAAMf,GAAeD,KAAcA,EAAa,kBAAoB,mBACrF,gBAAC,SAAD,CAAQgB,QAAS,kBAAMJ,mBAASd,KAAhC,aACA,gBAAC,SAAD,CAAQkB,QAAS,kBAAMb,GAAiBD,KAAxC,QACCA,GAAgB,4BAAUe,UAAQ,EAACH,UAAWC,IAAM,OACjDN,MAAOS,KAAKC,UAAUrB,OAAasB,EAAW,KAE9ChB,EAAmBiB,KAAI,YAAoB,IAAD,mBAAjB1B,EAAiB,KAAXc,EAAW,KACtC,OAAO,gBAAC,EAAD,eAAWa,IAAK3B,GAAU,CAACA,OAAMc,SAAjC,CAAyCc,SAAUf,W,SAiBzEhB,K,YAAAA,E,aAAAA,M,KAKL,IAAMgC,EAAsC,SAAC9B,GAAW,IAC7CC,EAAyBD,EAAzBC,KAAMc,EAAmBf,EAAnBe,MAAOc,EAAY7B,EAAZ6B,SAD+B,EAE3B3B,YAAwB,GAFG,mBAE5C6B,EAF4C,KAEtCC,EAFsC,KASnD,OACI,uBAAKZ,UAAWC,IAAO,eACnB,uBAAKD,UAAWC,IAAM,IAASC,QAAS,kBAAMU,GAASD,KAAQ9B,GAC/D,yBAAO4B,SARM,SAACI,GAA8C,IACzDlB,EAASkB,EAAMC,cAAfnB,MACPc,EAAS,CAAC5B,OAAMc,WAMmBoB,KAAMJ,EAAOjC,EAAUsC,IAAMtC,EAAUuC,KAAMtB,MAAOA,M,gBCvElFuB,EAAgB,WACzB,OACI,gBAAC,gBAAD,CAAeC,aAAW,EAACC,MAAOrC,eAAcsC,YAAU,GACtD,uBAAKrB,UAAWC,IAAM,KAClB,gBAAC,SAAD,CACID,UAAWC,IAAM,OACjBgB,KAAK,WACLK,QAAS,kBAAMC,OAAOC,WAE1B,gBAAC,EAAgBzC,mB,MCRjC0C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,4BAA4B,aAAa,gCAAgC,IAAM,2B,kBCA/ID,EAAOC,QAAU,CAAC,OAAS,oBAAoB,IAAM,mB","file":"static/js/main.658119ca.chunk.js","sourcesContent":["import * as React from 'react';\nimport {Theme, initializeThemeSelector, defaultTheme, Button, setTheme} from '@openfin/desktop-ui';\n\nimport Styles from './ThemeEditor.module.scss';\n\nexport const ThemeEditor: React.FC<Theme> = (props) => {\n    const {name} = props;\n    const [editorTheme, setEditorTheme] = React.useState<Theme>(defaultTheme);\n    const [autoUpdate, setAutoUpdate] = React.useState<boolean>(true);\n    const [toggleOutput, setToggleOutput] = React.useState<boolean>(false);\n    const defaultThemeColors = Object.entries(editorTheme.color);\n\n    const handlePropertyUpdate = (color: Color) => {\n        setEditorTheme({...editorTheme, color: {...editorTheme.color, [color.name]: color.value}});\n        console.log(color, editorTheme);\n    }\n\n    const handleTextUpdate = (color: Color) => {\n        setEditorTheme({\n            ...editorTheme,\n        } as Theme);\n    }\n\n    React.useEffect(() => {\n        if (autoUpdate) {\n            setTheme(editorTheme);\n        }\n    }, [autoUpdate, editorTheme]);\n\n    React.useEffect(() => {\n        initializeThemeSelector({});\n    });\n\n    return (\n        <div className={Styles['editor']}>\n            <Button onClick={() => setAutoUpdate(!autoUpdate)}>{autoUpdate ? '[*] auto update' : '[ ] auto update'}</Button>\n            <Button onClick={() => setTheme(editorTheme)}>Set theme</Button>\n            <Button onClick={() => setToggleOutput(!toggleOutput)}>JSON</Button>\n            {toggleOutput && <textarea readOnly className={Styles['output']}\n                value={JSON.stringify(editorTheme, undefined, 3)} />}\n            {\n                defaultThemeColors.map(([name, value]) => {\n                    return <ColorView key={name} {...{name, value}} onChange={handlePropertyUpdate} />\n                })\n            }\n        </div>\n    );\n};\n\n\ninterface Color {\n    name: string;\n    value: string;\n}\n\ninterface ColorViewProps extends Color {\n    onChange: (color: Color) => void;\n}\n\nenum ColorMode {\n    text = 'text',\n    hex = 'color'\n}\n\nconst ColorView: React.FC<ColorViewProps> = (props) => {\n    const {name, value, onChange} = props;\n    const [mode, setMode] = React.useState<boolean>(true);\n\n    const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const {value} = event.currentTarget;\n        onChange({name, value});\n    }\n\n    return (\n        <div className={Styles['color-view']}>\n            <div className={Styles['key']} onClick={() => setMode(!mode)}>{name}</div>\n            <input onChange={handleChange} type={mode ? ColorMode.hex : ColorMode.text} value={value} />\n        </div>\n    );\n};\n","import * as React from 'react';\nimport {ThemeEditor} from '../ThemeEditor/ThemeEditor';\nimport {defaultTheme, ThemeProvider, Header} from '@openfin/desktop-ui';\nimport Styles from './App.module.scss';\n\nexport const App: React.FC = () => {\n    return (\n        <ThemeProvider autoConnect theme={defaultTheme} updateBody>\n            <div className={Styles['app']}>\n                <Header\n                    className={Styles['header']}\n                    text=\"Tapestry\"\n                    onClose={() => window.close()}\n                />\n                <ThemeEditor {...defaultTheme} />\n            </div>\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './components/App/App';\n\nimport '@openfin/desktop-ui/ui-styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"ThemeEditor_editor__1VEYH\",\"output\":\"ThemeEditor_output__1joHw\",\"color-view\":\"ThemeEditor_color-view__1yGwb\",\"key\":\"ThemeEditor_key__1Zlik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__19PEX\",\"app\":\"App_app__CqjHz\"};"],"sourceRoot":""}